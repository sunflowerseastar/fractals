* quick start

This project was created with:

#+begin_src sh
lein new figwheel-main sierpinski -- --reagent
#+end_src

#+begin_src sh
# run
lein fig:build
# check connection
(js/alert "Am I connected?")

# clean and prod build
lein clean
lein fig:min
#+end_src

This project was started from [[https://www.packtpub.com/product/clojure-data-structures-and-algorithms-cookbook/9781785281457][Clojure Data Structures and Algorithms Cookbook, by Rakif Naccache]], section /Using Pascal's triangle to draw fractals/.

* diagrams

#+begin_src
[[1 0 0 0 0 0 0]
 [1 1 0 0 0 0 0]
 [1 1 1 0 0 0 0]
 [1 1 1 1 0 0 0]
 [1 1 1 1 1 0 0]
 [1 1 1 1 1 1 0]
 [1 1 1 1 1 1 1]]

[[1]
 [1 1]
 [1 1 1]
 [1 1 1 1]
 [1 1 1 1 1]
 [1 1 1 1 1 1]
 [1 1 1 1 1 1 1]]

[[1]
 [1 1]
 [1 2 1]
 [1 3 3 1]
 [1 4 6 4 1]
 [1 5 10 10 5 1]
 [1 6 15 20 15 6 1]]

(generate-sierpinski 5) => ...
[[1]
 [1 1]
 [1 0 1]
 [1 1 1 1]
 [1 0 0 0 1]
 [. . . . . .]]

Imagining each 1 as a black square, the above will be drawn as:

1 1 1 1 1 ...
  1 0 1 0 ...
    1 1 0 ...
      1 0 ...
        1 ...
          ...

It's as if the x and y were flipped.
#+end_src

I want

[[1]
 [1 1]
 [1 0 1]
 [1 1 1 1]
 [1 0 0 0 1]]

 to look like:

    1       [4,0]
   1 1      [3,1] [5,1]
  1 0 1     [2,2] [6,2]
 1 1 1 1    [1,3] [3,3] [5,3] [7,3]
1 0 0 0 1   [0,4] [8,4]

#+begin_src clojure
loop curr-y 0 ;; (get str curr-y) => [1]
     curr-starting-x (dec size) ;; => 4
     map (get str curr-y) ;; [1] => [ [ ] ]

#+end_src



    11       [4,0]
    11
   1111      [3,2], [5,2]
   1111
  11  11     [2,4], [6,4]
  11  11
 11111111    [1,6], [3,6], [5,6], [7,6]
 11111111
11      11   [0,8], [8,8]
11      11

* reference

https://github.com/reagent-project/reagent-cookbook/tree/master/recipes/canvas-fills-div
